from typing import List

class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        res = 0
        
        for element in tokens:
            match element:
                case '+':
                    op2 = int(stack.pop())
                    op1 = int(stack.pop())
                    res = op1 + op2
                    stack.append(str(res))
                case '-':
                    op2 = int(stack.pop())
                    op1 = int(stack.pop())
                    res = op1 - op2
                    stack.append(str(res))
                case '*':
                    op2 = int(stack.pop())
                    op1 = int(stack.pop())
                    res = op1 * op2
                    stack.append(str(res))
                case '/':
                    op2 = int(stack.pop())
                    op1 = int(stack.pop())
                    # Handle division truncating toward zero
                    res = int(op1 / op2)
                    stack.append(str(res))
                case _:
                    stack.append(element)
        
        if len(stack) == 0:
            return res
        else:
            return int(stack.pop())
